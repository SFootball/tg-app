/* tslint:disable */
/* eslint-disable */
/**
 * API Documentation
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AttemptsSchema
 */
export interface AttemptsSchema {
    /**
     * 
     * @type {number}
     * @memberof AttemptsSchema
     */
    'attempts'?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AuthPrefixToken = {
    Tma: 'tma',
    Bearer: 'Bearer',
    DevToken: 'dev-token'
} as const;

export type AuthPrefixToken = typeof AuthPrefixToken[keyof typeof AuthPrefixToken];


/**
 * 
 * @export
 * @interface CreatePlayerParams
 */
export interface CreatePlayerParams {
    /**
     * 
     * @type {string}
     * @memberof CreatePlayerParams
     */
    'tg_username'?: string;
}
/**
 * 
 * @export
 * @interface CreateTaskParamsSchema
 */
export interface CreateTaskParamsSchema {
    /**
     * 
     * @type {CreateTaskParamsSchemaDescription}
     * @memberof CreateTaskParamsSchema
     */
    'description'?: CreateTaskParamsSchemaDescription;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskParamsSchema
     */
    'link'?: string;
    /**
     * 
     * @type {CreateTaskParamsSchemaDescription}
     * @memberof CreateTaskParamsSchema
     */
    'name'?: CreateTaskParamsSchemaDescription;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskParamsSchema
     */
    'resource'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskParamsSchema
     */
    'resource_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateTaskParamsSchema
     */
    'reward'?: number;
}
/**
 * 
 * @export
 * @interface CreateTaskParamsSchemaDescription
 */
export interface CreateTaskParamsSchemaDescription {
    /**
     * 
     * @type {string}
     * @memberof CreateTaskParamsSchemaDescription
     */
    'en'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateTaskParamsSchemaDescription
     */
    'ru'?: string;
}
/**
 * 
 * @export
 * @interface DeleteTaskParamsSchema
 */
export interface DeleteTaskParamsSchema {
    /**
     * 
     * @type {string}
     * @memberof DeleteTaskParamsSchema
     */
    'id'?: string;
}
/**
 * 
 * @export
 * @interface PlayerSchema
 */
export interface PlayerSchema {
    /**
     * 
     * @type {string}
     * @memberof PlayerSchema
     */
    'birthday'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerSchema
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerSchema
     */
    'id'?: string;
    /**
     * 
     * @type {object}
     * @memberof PlayerSchema
     */
    'physical_characteristics'?: object;
    /**
     * 
     * @type {object}
     * @memberof PlayerSchema
     */
    'psychological_characteristics'?: object;
    /**
     * 
     * @type {string}
     * @memberof PlayerSchema
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerSchema
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const ResourceTypeSchema = {
    Telegram: 'telegram',
    Invite: 'invite'
} as const;

export type ResourceTypeSchema = typeof ResourceTypeSchema[keyof typeof ResourceTypeSchema];


/**
 * 
 * @export
 * @interface TaskCompleteParamsSchema
 */
export interface TaskCompleteParamsSchema {
    /**
     * 
     * @type {string}
     * @memberof TaskCompleteParamsSchema
     */
    'task_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof TaskCompleteParamsSchema
     */
    'tg_user_id'?: number;
}
/**
 * 
 * @export
 * @interface TaskCompletedResponseSchema
 */
export interface TaskCompletedResponseSchema {
    /**
     * 
     * @type {boolean}
     * @memberof TaskCompletedResponseSchema
     */
    'is_completed'?: boolean;
}
/**
 * 
 * @export
 * @interface TaskSchema
 */
export interface TaskSchema {
    /**
     * 
     * @type {string}
     * @memberof TaskSchema
     */
    'created_at'?: string;
    /**
     * 
     * @type {CreateTaskParamsSchemaDescription}
     * @memberof TaskSchema
     */
    'description'?: CreateTaskParamsSchemaDescription;
    /**
     * 
     * @type {string}
     * @memberof TaskSchema
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskSchema
     */
    'link'?: string;
    /**
     * 
     * @type {CreateTaskParamsSchemaDescription}
     * @memberof TaskSchema
     */
    'name'?: CreateTaskParamsSchemaDescription;
    /**
     * 
     * @type {string}
     * @memberof TaskSchema
     */
    'resource'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskSchema
     */
    'resource_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof TaskSchema
     */
    'reward'?: number;
    /**
     * 
     * @type {string}
     * @memberof TaskSchema
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface TonproofCheckPayloadBodySchema
 */
export interface TonproofCheckPayloadBodySchema {
    /**
     * 
     * @type {string}
     * @memberof TonproofCheckPayloadBodySchema
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof TonproofCheckPayloadBodySchema
     */
    'network'?: string;
    /**
     * 
     * @type {TonproofCheckPayloadBodySchemaProof}
     * @memberof TonproofCheckPayloadBodySchema
     */
    'proof'?: TonproofCheckPayloadBodySchemaProof;
}
/**
 * 
 * @export
 * @interface TonproofCheckPayloadBodySchemaProof
 */
export interface TonproofCheckPayloadBodySchemaProof {
    /**
     * 
     * @type {TonproofCheckPayloadBodySchemaProofDomain}
     * @memberof TonproofCheckPayloadBodySchemaProof
     */
    'domain'?: TonproofCheckPayloadBodySchemaProofDomain;
    /**
     * 
     * @type {string}
     * @memberof TonproofCheckPayloadBodySchemaProof
     */
    'payload'?: string;
    /**
     * 
     * @type {string}
     * @memberof TonproofCheckPayloadBodySchemaProof
     */
    'signature'?: string;
    /**
     * 
     * @type {string}
     * @memberof TonproofCheckPayloadBodySchemaProof
     */
    'state_init'?: string;
    /**
     * 
     * @type {number}
     * @memberof TonproofCheckPayloadBodySchemaProof
     */
    'timestamp'?: number;
}
/**
 * 
 * @export
 * @interface TonproofCheckPayloadBodySchemaProofDomain
 */
export interface TonproofCheckPayloadBodySchemaProofDomain {
    /**
     * 
     * @type {number}
     * @memberof TonproofCheckPayloadBodySchemaProofDomain
     */
    'lengthBytes'?: number;
    /**
     * 
     * @type {string}
     * @memberof TonproofCheckPayloadBodySchemaProofDomain
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface TonproofCheckPayloadResponseSchema
 */
export interface TonproofCheckPayloadResponseSchema {
    /**
     * 
     * @type {string}
     * @memberof TonproofCheckPayloadResponseSchema
     */
    'token'?: string;
}
/**
 * 
 * @export
 * @interface TonproofGeneratePayloadResponseSchema
 */
export interface TonproofGeneratePayloadResponseSchema {
    /**
     * 
     * @type {string}
     * @memberof TonproofGeneratePayloadResponseSchema
     */
    'payload'?: string;
}
/**
 * 
 * @export
 * @interface TonproofGetAccauntInfoResponseSchema
 */
export interface TonproofGetAccauntInfoResponseSchema {
    /**
     * 
     * @type {TonproofGetAccauntInfoResponseSchemaStandardClaims}
     * @memberof TonproofGetAccauntInfoResponseSchema
     */
    'StandardClaims'?: TonproofGetAccauntInfoResponseSchemaStandardClaims;
    /**
     * 
     * @type {number}
     * @memberof TonproofGetAccauntInfoResponseSchema
     */
    'tg_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TonproofGetAccauntInfoResponseSchema
     */
    'tg_username'?: string;
    /**
     * 
     * @type {string}
     * @memberof TonproofGetAccauntInfoResponseSchema
     */
    'ton_wallet_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof TonproofGetAccauntInfoResponseSchema
     */
    'user_id'?: string;
}
/**
 * 
 * @export
 * @interface TonproofGetAccauntInfoResponseSchemaStandardClaims
 */
export interface TonproofGetAccauntInfoResponseSchemaStandardClaims {
    /**
     * 
     * @type {string}
     * @memberof TonproofGetAccauntInfoResponseSchemaStandardClaims
     */
    'aud'?: string;
    /**
     * 
     * @type {number}
     * @memberof TonproofGetAccauntInfoResponseSchemaStandardClaims
     */
    'exp'?: number;
    /**
     * 
     * @type {number}
     * @memberof TonproofGetAccauntInfoResponseSchemaStandardClaims
     */
    'iat'?: number;
    /**
     * 
     * @type {string}
     * @memberof TonproofGetAccauntInfoResponseSchemaStandardClaims
     */
    'iss'?: string;
    /**
     * 
     * @type {string}
     * @memberof TonproofGetAccauntInfoResponseSchemaStandardClaims
     */
    'jti'?: string;
    /**
     * 
     * @type {number}
     * @memberof TonproofGetAccauntInfoResponseSchemaStandardClaims
     */
    'nbf'?: number;
    /**
     * 
     * @type {string}
     * @memberof TonproofGetAccauntInfoResponseSchemaStandardClaims
     */
    'sub'?: string;
}
/**
 * 
 * @export
 * @interface TonproofPayloadResponseSchema
 */
export interface TonproofPayloadResponseSchema {
    /**
     * 
     * @type {string}
     * @memberof TonproofPayloadResponseSchema
     */
    'payload'?: string;
}
/**
 * 
 * @export
 * @interface UpdateTaskParamsSchema
 */
export interface UpdateTaskParamsSchema {
    /**
     * 
     * @type {CreateTaskParamsSchemaDescription}
     * @memberof UpdateTaskParamsSchema
     */
    'description'?: CreateTaskParamsSchemaDescription;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskParamsSchema
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskParamsSchema
     */
    'link'?: string;
    /**
     * 
     * @type {CreateTaskParamsSchemaDescription}
     * @memberof UpdateTaskParamsSchema
     */
    'name'?: CreateTaskParamsSchemaDescription;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskParamsSchema
     */
    'resource'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTaskParamsSchema
     */
    'resource_id'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateTaskParamsSchema
     */
    'reward'?: number;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {Array<string>}
     * @memberof User
     */
    'completed_tasks_ids'?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'first_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'last_name'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'midle_name'?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'parent_tg_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password'?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'sfs_count'?: number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'tg_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'tg_username'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'ton_wallet_address'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updated_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'username'?: string;
}
/**
 * 
 * @export
 * @interface UserGetReferralsQueryParams
 */
export interface UserGetReferralsQueryParams {
    /**
     * 
     * @type {number}
     * @memberof UserGetReferralsQueryParams
     */
    'limit'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserGetReferralsQueryParams
     */
    'offset'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserGetReferralsQueryParams
     */
    'tg_id'?: number;
}
/**
 * 
 * @export
 * @interface UserUpdateSfsCount
 */
export interface UserUpdateSfsCount {
    /**
     * 
     * @type {number}
     * @memberof UserUpdateSfsCount
     */
    'sfs_count'?: number;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthTonproofAccauntInfoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/tonproof/accaunt-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TonproofCheckPayloadBodySchema} [tonproofCheckPayloadBodySchema]  {   \&quot;address\&quot;: \&quot;0:f63660ff947e5fe6ed4a8f729f1b24ef859497d0483aaa9d9ae48414297c4e1b\&quot;, // user\&#39;s address   \&quot;network\&quot;: \&quot;-1\&quot;, // \&quot;-239\&quot; for mainnet and \&quot;-1\&quot; for testnet   \&quot;proof\&quot;: {     \&quot;timestamp\&quot;: 1668094767, // unix epoch seconds    \&quot;domain\&quot;: {     \&quot;lengthBytes\&quot;: 21,     \&quot;value\&quot;: \&quot;ton-connect.github.io\&quot;    },    \&quot;signature\&quot;: \&quot;28tWSg8RDB3P/iIYupySINq1o3F5xLodndzNFHOtdi16Z+MuII8LAPnHLT3E6WTB27//qY4psU5Rf5/aJaIIAA&#x3D;&#x3D;\&quot;,    \&quot;payload\&quot;: \&quot;E5B4ARS6CdOI2b5e1jz0jnS-x-a3DgfNXprrg_3pec0&#x3D;\&quot; // payload from the step 1.   }  } \&quot; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthTonproofCheckPayloadPost: async (tonproofCheckPayloadBodySchema?: TonproofCheckPayloadBodySchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/tonproof/check-payload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tonproofCheckPayloadBodySchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthTonproofGeneratePayloadPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/tonproof/generate-payload`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthTonproofAccauntInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TonproofGetAccauntInfoResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthTonproofAccauntInfoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthTonproofAccauntInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TonproofCheckPayloadBodySchema} [tonproofCheckPayloadBodySchema]  {   \&quot;address\&quot;: \&quot;0:f63660ff947e5fe6ed4a8f729f1b24ef859497d0483aaa9d9ae48414297c4e1b\&quot;, // user\&#39;s address   \&quot;network\&quot;: \&quot;-1\&quot;, // \&quot;-239\&quot; for mainnet and \&quot;-1\&quot; for testnet   \&quot;proof\&quot;: {     \&quot;timestamp\&quot;: 1668094767, // unix epoch seconds    \&quot;domain\&quot;: {     \&quot;lengthBytes\&quot;: 21,     \&quot;value\&quot;: \&quot;ton-connect.github.io\&quot;    },    \&quot;signature\&quot;: \&quot;28tWSg8RDB3P/iIYupySINq1o3F5xLodndzNFHOtdi16Z+MuII8LAPnHLT3E6WTB27//qY4psU5Rf5/aJaIIAA&#x3D;&#x3D;\&quot;,    \&quot;payload\&quot;: \&quot;E5B4ARS6CdOI2b5e1jz0jnS-x-a3DgfNXprrg_3pec0&#x3D;\&quot; // payload from the step 1.   }  } \&quot; 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthTonproofCheckPayloadPost(tonproofCheckPayloadBodySchema?: TonproofCheckPayloadBodySchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TonproofCheckPayloadResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthTonproofCheckPayloadPost(tonproofCheckPayloadBodySchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthTonproofCheckPayloadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthTonproofGeneratePayloadPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TonproofGeneratePayloadResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthTonproofGeneratePayloadPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.apiAuthTonproofGeneratePayloadPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthTonproofAccauntInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<TonproofGetAccauntInfoResponseSchema> {
            return localVarFp.apiAuthTonproofAccauntInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AuthApiApiAuthTonproofCheckPayloadPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthTonproofCheckPayloadPost(requestParameters: AuthApiApiAuthTonproofCheckPayloadPostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TonproofCheckPayloadResponseSchema> {
            return localVarFp.apiAuthTonproofCheckPayloadPost(requestParameters.tonproofCheckPayloadBodySchema, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthTonproofGeneratePayloadPost(options?: RawAxiosRequestConfig): AxiosPromise<TonproofGeneratePayloadResponseSchema> {
            return localVarFp.apiAuthTonproofGeneratePayloadPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiAuthTonproofCheckPayloadPost operation in AuthApi.
 * @export
 * @interface AuthApiApiAuthTonproofCheckPayloadPostRequest
 */
export interface AuthApiApiAuthTonproofCheckPayloadPostRequest {
    /**
     *  {   \&quot;address\&quot;: \&quot;0:f63660ff947e5fe6ed4a8f729f1b24ef859497d0483aaa9d9ae48414297c4e1b\&quot;, // user\&#39;s address   \&quot;network\&quot;: \&quot;-1\&quot;, // \&quot;-239\&quot; for mainnet and \&quot;-1\&quot; for testnet   \&quot;proof\&quot;: {     \&quot;timestamp\&quot;: 1668094767, // unix epoch seconds    \&quot;domain\&quot;: {     \&quot;lengthBytes\&quot;: 21,     \&quot;value\&quot;: \&quot;ton-connect.github.io\&quot;    },    \&quot;signature\&quot;: \&quot;28tWSg8RDB3P/iIYupySINq1o3F5xLodndzNFHOtdi16Z+MuII8LAPnHLT3E6WTB27//qY4psU5Rf5/aJaIIAA&#x3D;&#x3D;\&quot;,    \&quot;payload\&quot;: \&quot;E5B4ARS6CdOI2b5e1jz0jnS-x-a3DgfNXprrg_3pec0&#x3D;\&quot; // payload from the step 1.   }  } \&quot; 
     * @type {TonproofCheckPayloadBodySchema}
     * @memberof AuthApiApiAuthTonproofCheckPayloadPost
     */
    readonly tonproofCheckPayloadBodySchema?: TonproofCheckPayloadBodySchema
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthTonproofAccauntInfoGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthTonproofAccauntInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AuthApiApiAuthTonproofCheckPayloadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthTonproofCheckPayloadPost(requestParameters: AuthApiApiAuthTonproofCheckPayloadPostRequest = {}, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthTonproofCheckPayloadPost(requestParameters.tonproofCheckPayloadBodySchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthTonproofGeneratePayloadPost(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthTonproofGeneratePayloadPost(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GameApi - axios parameter creator
 * @export
 */
export const GameApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGameCalculateAttemptsPut: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/game/calculate-attempts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGameDecreaseAttemptsPut: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/game/decrease-attempts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GameApi - functional programming interface
 * @export
 */
export const GameApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GameApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGameCalculateAttemptsPut(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttemptsSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGameCalculateAttemptsPut(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.apiGameCalculateAttemptsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiGameDecreaseAttemptsPut(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiGameDecreaseAttemptsPut(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GameApi.apiGameDecreaseAttemptsPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GameApi - factory interface
 * @export
 */
export const GameApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GameApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGameCalculateAttemptsPut(options?: RawAxiosRequestConfig): AxiosPromise<AttemptsSchema> {
            return localVarFp.apiGameCalculateAttemptsPut(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiGameDecreaseAttemptsPut(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.apiGameDecreaseAttemptsPut(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GameApi - object-oriented interface
 * @export
 * @class GameApi
 * @extends {BaseAPI}
 */
export class GameApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public apiGameCalculateAttemptsPut(options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).apiGameCalculateAttemptsPut(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GameApi
     */
    public apiGameDecreaseAttemptsPut(options?: RawAxiosRequestConfig) {
        return GameApiFp(this.configuration).apiGameDecreaseAttemptsPut(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * PlayersApi - axios parameter creator
 * @export
 */
export const PlayersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreatePlayerParams} [createPlayerParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayersCreateOnePost: async (createPlayerParams?: CreatePlayerParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/players/create-one`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPlayerParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/players`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlayersApi - functional programming interface
 * @export
 */
export const PlayersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlayersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreatePlayerParams} [createPlayerParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPlayersCreateOnePost(createPlayerParams?: CreatePlayerParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlayerSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlayersCreateOnePost(createPlayerParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayersApi.apiPlayersCreateOnePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPlayersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlayerSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPlayersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlayersApi.apiPlayersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlayersApi - factory interface
 * @export
 */
export const PlayersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlayersApiFp(configuration)
    return {
        /**
         * 
         * @param {PlayersApiApiPlayersCreateOnePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayersCreateOnePost(requestParameters: PlayersApiApiPlayersCreateOnePostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<PlayerSchema> {
            return localVarFp.apiPlayersCreateOnePost(requestParameters.createPlayerParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPlayersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<PlayerSchema>> {
            return localVarFp.apiPlayersGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiPlayersCreateOnePost operation in PlayersApi.
 * @export
 * @interface PlayersApiApiPlayersCreateOnePostRequest
 */
export interface PlayersApiApiPlayersCreateOnePostRequest {
    /**
     * 
     * @type {CreatePlayerParams}
     * @memberof PlayersApiApiPlayersCreateOnePost
     */
    readonly createPlayerParams?: CreatePlayerParams
}

/**
 * PlayersApi - object-oriented interface
 * @export
 * @class PlayersApi
 * @extends {BaseAPI}
 */
export class PlayersApi extends BaseAPI {
    /**
     * 
     * @param {PlayersApiApiPlayersCreateOnePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public apiPlayersCreateOnePost(requestParameters: PlayersApiApiPlayersCreateOnePostRequest = {}, options?: RawAxiosRequestConfig) {
        return PlayersApiFp(this.configuration).apiPlayersCreateOnePost(requestParameters.createPlayerParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlayersApi
     */
    public apiPlayersGet(options?: RawAxiosRequestConfig) {
        return PlayersApiFp(this.configuration).apiPlayersGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksAllGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tasks/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TaskCompleteParamsSchema} [taskCompleteParamsSchema] Task completed params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksCheckCompletePost: async (taskCompleteParamsSchema?: TaskCompleteParamsSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tasks/check-complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskCompleteParamsSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTaskParamsSchema} [createTaskParamsSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksCreateOnePost: async (createTaskParamsSchema?: CreateTaskParamsSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tasks/create-one`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTaskParamsSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DeleteTaskParamsSchema} [deleteTaskParamsSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksDeleteOneDelete: async (deleteTaskParamsSchema?: DeleteTaskParamsSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tasks/delete-one`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteTaskParamsSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UpdateTaskParamsSchema} [updateTaskParamsSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksUpdateOnePut: async (updateTaskParamsSchema?: UpdateTaskParamsSchema, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tasks/update-one`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTaskParamsSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTasksAllGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskSchema>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTasksAllGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.apiTasksAllGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TaskCompleteParamsSchema} [taskCompleteParamsSchema] Task completed params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTasksCheckCompletePost(taskCompleteParamsSchema?: TaskCompleteParamsSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskCompletedResponseSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTasksCheckCompletePost(taskCompleteParamsSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.apiTasksCheckCompletePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateTaskParamsSchema} [createTaskParamsSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTasksCreateOnePost(createTaskParamsSchema?: CreateTaskParamsSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTasksCreateOnePost(createTaskParamsSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.apiTasksCreateOnePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DeleteTaskParamsSchema} [deleteTaskParamsSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTasksDeleteOneDelete(deleteTaskParamsSchema?: DeleteTaskParamsSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTasksDeleteOneDelete(deleteTaskParamsSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.apiTasksDeleteOneDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UpdateTaskParamsSchema} [updateTaskParamsSchema] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTasksUpdateOnePut(updateTaskParamsSchema?: UpdateTaskParamsSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskSchema>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTasksUpdateOnePut(updateTaskParamsSchema, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.apiTasksUpdateOnePut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksAllGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<TaskSchema>> {
            return localVarFp.apiTasksAllGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TasksApiApiTasksCheckCompletePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksCheckCompletePost(requestParameters: TasksApiApiTasksCheckCompletePostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TaskCompletedResponseSchema> {
            return localVarFp.apiTasksCheckCompletePost(requestParameters.taskCompleteParamsSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TasksApiApiTasksCreateOnePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksCreateOnePost(requestParameters: TasksApiApiTasksCreateOnePostRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TaskSchema> {
            return localVarFp.apiTasksCreateOnePost(requestParameters.createTaskParamsSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TasksApiApiTasksDeleteOneDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksDeleteOneDelete(requestParameters: TasksApiApiTasksDeleteOneDeleteRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TaskSchema> {
            return localVarFp.apiTasksDeleteOneDelete(requestParameters.deleteTaskParamsSchema, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TasksApiApiTasksUpdateOnePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTasksUpdateOnePut(requestParameters: TasksApiApiTasksUpdateOnePutRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<TaskSchema> {
            return localVarFp.apiTasksUpdateOnePut(requestParameters.updateTaskParamsSchema, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiTasksCheckCompletePost operation in TasksApi.
 * @export
 * @interface TasksApiApiTasksCheckCompletePostRequest
 */
export interface TasksApiApiTasksCheckCompletePostRequest {
    /**
     * Task completed params
     * @type {TaskCompleteParamsSchema}
     * @memberof TasksApiApiTasksCheckCompletePost
     */
    readonly taskCompleteParamsSchema?: TaskCompleteParamsSchema
}

/**
 * Request parameters for apiTasksCreateOnePost operation in TasksApi.
 * @export
 * @interface TasksApiApiTasksCreateOnePostRequest
 */
export interface TasksApiApiTasksCreateOnePostRequest {
    /**
     * 
     * @type {CreateTaskParamsSchema}
     * @memberof TasksApiApiTasksCreateOnePost
     */
    readonly createTaskParamsSchema?: CreateTaskParamsSchema
}

/**
 * Request parameters for apiTasksDeleteOneDelete operation in TasksApi.
 * @export
 * @interface TasksApiApiTasksDeleteOneDeleteRequest
 */
export interface TasksApiApiTasksDeleteOneDeleteRequest {
    /**
     * 
     * @type {DeleteTaskParamsSchema}
     * @memberof TasksApiApiTasksDeleteOneDelete
     */
    readonly deleteTaskParamsSchema?: DeleteTaskParamsSchema
}

/**
 * Request parameters for apiTasksUpdateOnePut operation in TasksApi.
 * @export
 * @interface TasksApiApiTasksUpdateOnePutRequest
 */
export interface TasksApiApiTasksUpdateOnePutRequest {
    /**
     * 
     * @type {UpdateTaskParamsSchema}
     * @memberof TasksApiApiTasksUpdateOnePut
     */
    readonly updateTaskParamsSchema?: UpdateTaskParamsSchema
}

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public apiTasksAllGet(options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).apiTasksAllGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TasksApiApiTasksCheckCompletePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public apiTasksCheckCompletePost(requestParameters: TasksApiApiTasksCheckCompletePostRequest = {}, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).apiTasksCheckCompletePost(requestParameters.taskCompleteParamsSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TasksApiApiTasksCreateOnePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public apiTasksCreateOnePost(requestParameters: TasksApiApiTasksCreateOnePostRequest = {}, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).apiTasksCreateOnePost(requestParameters.createTaskParamsSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TasksApiApiTasksDeleteOneDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public apiTasksDeleteOneDelete(requestParameters: TasksApiApiTasksDeleteOneDeleteRequest = {}, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).apiTasksDeleteOneDelete(requestParameters.deleteTaskParamsSchema, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TasksApiApiTasksUpdateOnePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public apiTasksUpdateOnePut(requestParameters: TasksApiApiTasksUpdateOnePutRequest = {}, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).apiTasksUpdateOnePut(requestParameters.updateTaskParamsSchema, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGetUserInfoGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/get-user-info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserGetReferralsQueryParams} [userGetReferralsQueryParams] Telegram id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersReferralsGet: async (userGetReferralsQueryParams?: UserGetReferralsQueryParams, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/referrals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userGetReferralsQueryParams !== undefined) {
                for (const [key, value] of Object.entries(userGetReferralsQueryParams)) {
                    localVarQueryParameter[key] = value;
                }
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserUpdateSfsCount} userUpdateSfsCount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersUpdateSfsCountPost: async (userUpdateSfsCount: UserUpdateSfsCount, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUpdateSfsCount' is not null or undefined
            assertParamExists('apiUsersUpdateSfsCountPost', 'userUpdateSfsCount', userUpdateSfsCount)
            const localVarPath = `/api/users/update-sfs-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdateSfsCount, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersGetUserInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersGetUserInfoGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersGetUserInfoGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserGetReferralsQueryParams} [userGetReferralsQueryParams] Telegram id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersReferralsGet(userGetReferralsQueryParams?: UserGetReferralsQueryParams, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersReferralsGet(userGetReferralsQueryParams, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersReferralsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UserUpdateSfsCount} userUpdateSfsCount 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersUpdateSfsCountPost(userUpdateSfsCount: UserUpdateSfsCount, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersUpdateSfsCountPost(userUpdateSfsCount, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.apiUsersUpdateSfsCountPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.apiUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGetUserInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.apiUsersGetUserInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiApiUsersReferralsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersReferralsGet(requestParameters: UsersApiApiUsersReferralsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.apiUsersReferralsGet(requestParameters.userGetReferralsQueryParams, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersApiApiUsersUpdateSfsCountPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersUpdateSfsCountPost(requestParameters: UsersApiApiUsersUpdateSfsCountPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.apiUsersUpdateSfsCountPost(requestParameters.userUpdateSfsCount, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiUsersReferralsGet operation in UsersApi.
 * @export
 * @interface UsersApiApiUsersReferralsGetRequest
 */
export interface UsersApiApiUsersReferralsGetRequest {
    /**
     * Telegram id
     * @type {UserGetReferralsQueryParams}
     * @memberof UsersApiApiUsersReferralsGet
     */
    readonly userGetReferralsQueryParams?: UserGetReferralsQueryParams
}

/**
 * Request parameters for apiUsersUpdateSfsCountPost operation in UsersApi.
 * @export
 * @interface UsersApiApiUsersUpdateSfsCountPostRequest
 */
export interface UsersApiApiUsersUpdateSfsCountPostRequest {
    /**
     * 
     * @type {UserUpdateSfsCount}
     * @memberof UsersApiApiUsersUpdateSfsCountPost
     */
    readonly userUpdateSfsCount: UserUpdateSfsCount
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersGetUserInfoGet(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersGetUserInfoGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiApiUsersReferralsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersReferralsGet(requestParameters: UsersApiApiUsersReferralsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersReferralsGet(requestParameters.userGetReferralsQueryParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersApiApiUsersUpdateSfsCountPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersUpdateSfsCountPost(requestParameters: UsersApiApiUsersUpdateSfsCountPostRequest, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersUpdateSfsCountPost(requestParameters.userUpdateSfsCount, options).then((request) => request(this.axios, this.basePath));
    }
}



